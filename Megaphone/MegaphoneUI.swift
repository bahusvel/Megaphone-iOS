//
//  MegaphoneUI.swift
//  Megaphone
//
//  Created by Denis Lavrov on 26/03/16.
//  Copyright (c) 2016 bahus. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class MegaphoneUI : NSObject {

    //// Drawing Methods

    public class func drawIcon() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let color = UIColor(red: 0.963, green: 0.554, blue: 0.000, alpha: 1.000)
        var colorRedComponent: CGFloat = 1,
            colorGreenComponent: CGFloat = 1,
            colorBlueComponent: CGFloat = 1
        color.getRed(&colorRedComponent, green: &colorGreenComponent, blue: &colorBlueComponent, alpha: nil)

        let color3 = UIColor(red: (colorRedComponent * 0.8 + 0.2), green: (colorGreenComponent * 0.8 + 0.2), blue: (colorBlueComponent * 0.8 + 0.2), alpha: (CGColorGetAlpha(color.CGColor) * 0.8 + 0.2))
        let color2 = UIColor(red: 0.866, green: 0.866, blue: 0.866, alpha: 1.000)
        var color2RedComponent: CGFloat = 1,
            color2GreenComponent: CGFloat = 1,
            color2BlueComponent: CGFloat = 1
        color2.getRed(&color2RedComponent, green: &color2GreenComponent, blue: &color2BlueComponent, alpha: nil)

        let color5 = UIColor(red: (color2RedComponent * 0 + 1), green: (color2GreenComponent * 0 + 1), blue: (color2BlueComponent * 0 + 1), alpha: (CGColorGetAlpha(color2.CGColor) * 0 + 1))
        let color4 = UIColor(red: 0.316, green: 0.249, blue: 0.718, alpha: 1.000)
        let color6 = UIColor(red: 0.000, green: 0.643, blue: 1.000, alpha: 1.000)
        let color7 = color6.colorWithAlphaComponent(0.5)

        //// Gradient Declarations
        let gradient = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [color.CGColor, color3.CGColor, color.CGColor], [0, 0.35, 1])!
        let gradient2 = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [color2.CGColor, color5.CGColor, color2.CGColor], [0, 0.51, 1])!
        let gradient3 = CGGradientCreateWithColors(CGColorSpaceCreateDeviceRGB(), [color7.CGColor, color7.blendedColorWithFraction(0.5, ofColor: color6).CGColor, color6.CGColor, color6.blendedColorWithFraction(0.5, ofColor: color7).CGColor, color7.CGColor], [0, 0.1, 0.51, 0.9, 1])!

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor().colorWithAlphaComponent(0.45)
        shadow.shadowOffset = CGSizeMake(0.1, -0.1)
        shadow.shadowBlurRadius = 6
        let shadow2 = NSShadow()
        shadow2.shadowColor = color6.colorWithAlphaComponent(0.8 * CGColorGetAlpha(color6.CGColor))
        shadow2.shadowOffset = CGSizeMake(0.1, -0.1)
        shadow2.shadowBlurRadius = 2

        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRectMake(0.25, -0.25, 60, 60), cornerRadius: 12)
        color4.setFill()
        rectangle2Path.fill()


        //// Group 2
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, -5, 41)
        CGContextRotateCTM(context, -45 * CGFloat(M_PI) / 180)



        //// Group
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow2.shadowOffset, shadow2.shadowBlurRadius, (shadow2.shadowColor as! UIColor).CGColor)
        CGContextBeginTransparencyLayer(context, nil)


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.moveToPoint(CGPointMake(54, 17.5))
        bezier3Path.addCurveToPoint(CGPointMake(44.36, 32), controlPoint1: CGPointMake(54, 25.51), controlPoint2: CGPointMake(49.68, 32))
        bezier3Path.addCurveToPoint(CGPointMake(39.85, 30.31), controlPoint1: CGPointMake(42.73, 32), controlPoint2: CGPointMake(41.19, 31.39))
        bezier3Path.addCurveToPoint(CGPointMake(42.17, 30.74), controlPoint1: CGPointMake(40.59, 30.59), controlPoint2: CGPointMake(41.37, 30.74))
        bezier3Path.addCurveToPoint(CGPointMake(51.37, 17.5), controlPoint1: CGPointMake(47.25, 30.74), controlPoint2: CGPointMake(51.37, 24.81))
        bezier3Path.addCurveToPoint(CGPointMake(42.17, 4.26), controlPoint1: CGPointMake(51.37, 10.19), controlPoint2: CGPointMake(47.25, 4.26))
        bezier3Path.addCurveToPoint(CGPointMake(39.85, 4.69), controlPoint1: CGPointMake(41.37, 4.26), controlPoint2: CGPointMake(40.59, 4.41))
        bezier3Path.addCurveToPoint(CGPointMake(44.36, 3), controlPoint1: CGPointMake(41.19, 3.61), controlPoint2: CGPointMake(42.73, 3))
        bezier3Path.addCurveToPoint(CGPointMake(54, 17.5), controlPoint1: CGPointMake(49.68, 3), controlPoint2: CGPointMake(54, 9.49))
        bezier3Path.closePath()
        bezier3Path.lineCapStyle = .Round;

        bezier3Path.lineJoinStyle = .Round;

        CGContextSaveGState(context)
        bezier3Path.addClip()
        CGContextDrawLinearGradient(context, gradient3, CGPointMake(46.92, 3), CGPointMake(46.92, 32), CGGradientDrawingOptions())
        CGContextRestoreGState(context)


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.moveToPoint(CGPointMake(60, 17.5))
        bezier4Path.addCurveToPoint(CGPointMake(50.47, 35), controlPoint1: CGPointMake(60, 27.16), controlPoint2: CGPointMake(55.73, 35))
        bezier4Path.addCurveToPoint(CGPointMake(46, 32.96), controlPoint1: CGPointMake(48.85, 35), controlPoint2: CGPointMake(47.33, 34.26))
        bezier4Path.addCurveToPoint(CGPointMake(48.3, 33.48), controlPoint1: CGPointMake(46.73, 33.3), controlPoint2: CGPointMake(47.51, 33.48))
        bezier4Path.addCurveToPoint(CGPointMake(57.4, 17.5), controlPoint1: CGPointMake(53.33, 33.48), controlPoint2: CGPointMake(57.4, 26.32))
        bezier4Path.addCurveToPoint(CGPointMake(48.3, 1.52), controlPoint1: CGPointMake(57.4, 8.68), controlPoint2: CGPointMake(53.33, 1.52))
        bezier4Path.addCurveToPoint(CGPointMake(46, 2.04), controlPoint1: CGPointMake(47.51, 1.52), controlPoint2: CGPointMake(46.73, 1.7))
        bezier4Path.addCurveToPoint(CGPointMake(50.47, 0), controlPoint1: CGPointMake(47.33, 0.74), controlPoint2: CGPointMake(48.85, 0))
        bezier4Path.addCurveToPoint(CGPointMake(60, 17.5), controlPoint1: CGPointMake(55.73, 0), controlPoint2: CGPointMake(60, 7.84))
        bezier4Path.closePath()
        bezier4Path.lineCapStyle = .Round;

        bezier4Path.lineJoinStyle = .Round;

        CGContextSaveGState(context)
        bezier4Path.addClip()
        CGContextDrawLinearGradient(context, gradient3, CGPointMake(53, -0), CGPointMake(53, 35), CGGradientDrawingOptions())
        CGContextRestoreGState(context)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPointMake(48, 17.5))
        bezierPath.addCurveToPoint(CGPointMake(38.36, 29), controlPoint1: CGPointMake(48, 23.85), controlPoint2: CGPointMake(43.68, 29))
        bezierPath.addCurveToPoint(CGPointMake(33.85, 27.66), controlPoint1: CGPointMake(36.73, 29), controlPoint2: CGPointMake(35.19, 28.52))
        bezierPath.addCurveToPoint(CGPointMake(36.17, 28), controlPoint1: CGPointMake(34.59, 27.88), controlPoint2: CGPointMake(35.37, 28))
        bezierPath.addCurveToPoint(CGPointMake(45.37, 17.5), controlPoint1: CGPointMake(41.25, 28), controlPoint2: CGPointMake(45.37, 23.3))
        bezierPath.addCurveToPoint(CGPointMake(36.17, 7), controlPoint1: CGPointMake(45.37, 11.7), controlPoint2: CGPointMake(41.25, 7))
        bezierPath.addCurveToPoint(CGPointMake(33.85, 7.34), controlPoint1: CGPointMake(35.37, 7), controlPoint2: CGPointMake(34.59, 7.12))
        bezierPath.addCurveToPoint(CGPointMake(38.36, 6), controlPoint1: CGPointMake(35.19, 6.48), controlPoint2: CGPointMake(36.73, 6))
        bezierPath.addCurveToPoint(CGPointMake(48, 17.5), controlPoint1: CGPointMake(43.68, 6), controlPoint2: CGPointMake(48, 11.15))
        bezierPath.closePath()
        CGContextSaveGState(context)
        bezierPath.addClip()
        CGContextDrawLinearGradient(context, gradient3, CGPointMake(40.92, 6), CGPointMake(40.92, 29), CGGradientDrawingOptions())
        CGContextRestoreGState(context)


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)


        //// Group 3
        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(roundedRect: CGRectMake(36, 15, 6, 5), cornerRadius: 2.5)
        color5.setFill()
        rectangle4Path.fill()


        //// Group 4
        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        CGContextBeginTransparencyLayer(context, nil)


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPointMake(16.5, 13.5))
        bezier2Path.addCurveToPoint(CGPointMake(39.5, 3.5), controlPoint1: CGPointMake(29.5, 13.5), controlPoint2: CGPointMake(39.5, 3.5))
        bezier2Path.addLineToPoint(CGPointMake(39.5, 32.5))
        bezier2Path.addCurveToPoint(CGPointMake(16.5, 22.5), controlPoint1: CGPointMake(39.5, 32.5), controlPoint2: CGPointMake(28.5, 22.5))
        bezier2Path.addCurveToPoint(CGPointMake(16.5, 13.5), controlPoint1: CGPointMake(16.5, 19.5), controlPoint2: CGPointMake(16.5, 13.5))
        bezier2Path.lineCapStyle = .Round;

        bezier2Path.lineJoinStyle = .Bevel;

        CGContextSaveGState(context)
        bezier2Path.addClip()
        CGContextDrawLinearGradient(context, gradient2,
            CGPointMake(26.22, 6.32),
            CGPointMake(29.38, 25.71),
            [CGGradientDrawingOptions.DrawsBeforeStartLocation, CGGradientDrawingOptions.DrawsAfterEndLocation])
        CGContextRestoreGState(context)
        color2.setStroke()
        bezier2Path.lineWidth = 1
        bezier2Path.stroke()


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(roundedRect: CGRectMake(0, 13, 17, 10), byRoundingCorners: [UIRectCorner.TopLeft, UIRectCorner.BottomLeft], cornerRadii: CGSizeMake(5, 5))
        rectangle5Path.closePath()
        CGContextSaveGState(context)
        rectangle5Path.addClip()
        CGContextDrawLinearGradient(context, gradient, CGPointMake(8.5, 13), CGPointMake(8.5, 23), CGGradientDrawingOptions())
        CGContextRestoreGState(context)


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)





        CGContextRestoreGState(context)
    }

}



extension UIColor {
    func blendedColorWithFraction(fraction: CGFloat, ofColor color: UIColor) -> UIColor {
        var r1: CGFloat = 1.0, g1: CGFloat = 1.0, b1: CGFloat = 1.0, a1: CGFloat = 1.0
        var r2: CGFloat = 1.0, g2: CGFloat = 1.0, b2: CGFloat = 1.0, a2: CGFloat = 1.0

        self.getRed(&r1, green: &g1, blue: &b1, alpha: &a1)
        color.getRed(&r2, green: &g2, blue: &b2, alpha: &a2)

        return UIColor(red: r1 * (1 - fraction) + r2 * fraction,
            green: g1 * (1 - fraction) + g2 * fraction,
            blue: b1 * (1 - fraction) + b2 * fraction,
            alpha: a1 * (1 - fraction) + a2 * fraction);
    }
}
